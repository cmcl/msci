Paper: Engineering Formal Metatheory
Authors: Brian Aydemir, Arthur Chargu√©raud, Benjamin C. Pierce, Randy Pollack,
	 Stephanie Weirich
BibTeX: @inproceedings{Aydemir:2008:EFM:1328438.1328443,
 author = {Aydemir, Brian and Chargu{\'e}raud, Arthur and Pierce,
 Benjamin C. and Pollack, Randy and Weirich, Stephanie},
 title = {Engineering Formal Metatheory},
 booktitle = {Proceedings of the 35th Annual ACM SIGPLAN-SIGACT Symposium on
 Principles of Programming Languages},
 series = {POPL '08},
 year = {2008},
 isbn = {978-1-59593-689-9},
 location = {San Francisco, California, USA},
 pages = {3--15},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/1328438.1328443},
 doi = {10.1145/1328438.1328443},
 acmid = {1328443},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {binding, coq, locally nameless},
}
Abstract:

Formalising programming languages within a proof assistant is becoming a
more widely adopted convention within the research community in lieu of hand
written proofs.

Review:

Discussing issues in engineering metatheory for programming languages.
Focus was on the locally nameless representation for binders with names
for free variables and de Brujin indices for bound variables. There was
also novel use of cofinite quantification to rules with bindings to increase
the strength of the induction principles and reduce the amount of renaming
of bound variables (due to freshness issues) significantly. The theory was
tested with formalisations of the simply-typed lambda calculus, System F_sub,
the calculus of constructions. The formalisations followed the POPLMARK
challenge (type soundness, preservation, progress).

