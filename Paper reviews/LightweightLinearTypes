Paper: Lightweight linear types in System F-pop
Authors: Karl Mazurak, Jianzhou Zhao, and Steve Zdancewic
Review:

what do I see this helping with?

So, it uses two typing contexts and this subkind relation thing for the linear
and unrestricted kinds of types. There are also some examples (which I've not
cared to look at yet), and what is called ``Linear Semantics'' which would be
worth a read.

Linear Semantics
------------------

So, what's this about?

Starting new (read: better) review below (22/9/2014):
-------------------

Introduction of an extension of System F to support a notion of kinds which
represents whether or not a resource is to be treated linearly. The two kinds
(linear or unrestricted, as termed in the paper) have a relationship between
each other which allows all unrestricted kinds to be treated as though they
were linear. Intuitively, this is sound.

Compared to other approaches like ``let !'' introduced by Wadler and type
qualifiers kinds offers the best of both worlds, facilitating programming with
unrestricted kinds to be easy (as in type qualifiers) and integrating well
with polymorphism (as in ``let !'').

We separate out the file operations and file handle itself in calls to library
functions, supposedly because this allows us to show that the file handle
given is the one returned. I'm not sure how this is reflected in the type
alone. The reason is: if we just keep the existential package then the type
for readLine becomes, existential package -> (String, existential package),
with no dependency on the existential bound alphas.

The typing rules are fairly standard, extended with kind subsumption and
other kind rules for dealing with abstraction (term and type), and membership
of the unrestricted environment (gamma) which contains both term and type
variables. The typing rules also split linear typing contexts using a
union-esque relation which additionally encodes the possibility of an
linear type belonging to both the unrestricted environment (through
subsumption) and the linear environment. I'm not sure where call-by-value
reduction allows only consideration of values comes from...need to look this
up.

I need to review the parametricity lectures by Derek Dreyer since this paper
talks an awful lot about it; proving parametricity properties for System F-pop
using some relation stuff which I have mostly forgotten. The translation from
a polymorphic lambda calculus that uses the ! modality treats !t (t is a term)
as unrestricted variables by translating them into abstractions accepting an
unused variable of Unit type. This also t be used any number of times, each
use corresponding to a function call. Since in the lambda calculus with ! all
variables are linear we cannot simply define !t as some unrestricted typed
term but have to use this abstraction trick to temporarily allow unrestricted
access within a let. It is difficult to provide the translation in the
opposite direction since, for example, any functions taking an unrestricted
type must now take a ! type and bind it so we can have unrestricted access and
calls within the function will need to rebind the variable under !. Note, the
let ! typing rule: let !x = t_1 in t_2 requires t_1 to have type !o.

An interesting use of interfaces with kinds is to implement a variety of
reference cell types with a range of different properties. Close to the
example found in the ``adopt and focus'' type system we can have a ``share
ref'' which encodes the notion of aliases and restricts modification to those
cells which are not aliased (or shared). Note that linearity is not combined
with alias-freedom since then we could say unrestricted types are also free
from aliases (via subsumption). Thus, one way to guarantee we have no aliases
of a reference is to use two linear types (``access capabilities''), one to
encode exclusive ownership and the other to encode possible sharing/aliasing
of the underlying reference. The idea of combining a reference permitting with
sharability is the essence of the capabilities used within the adoption and
focus type system i.e. strong updates are permitted only when the reference is
not shared (aliased). How does SURef get coerced into a regular reference?
Paper say partial application of member functions but how does setting alpha
to alpah applied to tau get you partially applied functions?

Proofs are provided which show that the language can represented regular
protocols encodable in a DFA. In order for the proofs to go through, however,
requires appeal to intuitions about linear typing. The call-by-value setting
with the value restriction is allow the machinery needed to support intuitions
about linearity i.e. that subexpressions of linear type will be used exactly
once.

To reason about the effect of linearity at run-time, an extended operational
semantics is presented which defines how subexpressions are used formally. The
two cases considered are values used as arguments to functions (conscripted)
and values that are subsequently used after having been ``conscripted''
(discharged). The reduction relation is augmented with labels describing the
set of conscripted and discharged values at each step, represented as values
tagged with their type. Additionally, types are tagged with their kinds upon
substitution into a type abstraction. Therefore, to ensure linear values are
used exactly once it is enough to check that the set of linear discharged
values in any reduction sequence is unique i.e. that a value was not
``discharged'' twice.

The intuition for how linearity behaves at run-time is that arguments with a
linear type are never treated non-linearly within the function to which they
are an argument. That is, they are neither duplicated nor discarded i.e. must
be used exactly once. An equivalent definition is for a reduction of the form:
e ~C,D~> e', the union of the tagged values in e and C (with those values
tagged with unrestricted types removed) is equal to the union of the tagged
values in e' and D (with those values tagged with unrestricted types removed).

Unrestricted results can be explained intuitively as: for a proper expression
e we reduce to a value v with conscripted values C and discharged values D.
Since e was of unrestricted type then v is also of unrestricted type.
Therefore, the tagged values in v excluding any unrestricted values is empty.
Also, any linearly tagged values must have been discharged to obtain a final
value of unrestricted type. So, we require that the discharged linear values
be equal to those within e and those conscripted during the reduction.

Not entirely sure I understand the applications section. The existential types
encoding seems okay but the DFAs subsubsection is confusing. The accepting
DFA trace is the set of discharged values tagged as occuring on the left side
of applications, since this represents the set of functions called and since
we have modified the syntax of functions to record the name of record labels
then the tagged values will contain that name also; which would occur in an
accepting DFA trace.
So change lambda abstractions to some abstraction accepting a name (in
addition to all the things currently expected in a lambda abstraction). Now
since a function abstraction is a value, it will appear in the discharged set
when it is used. Simply further label discharged tagged values with L and R
indicating whether they occurred on the left or right side of an application,
then we have a DFA trace by following the L tagged values of a reduction.

Some extensions of the language are described to incorporate features similar
to those provided by practical functional programming languages. In addition,
support for programming using linear types is suggested; making use of
syntactic to simplify or eliminate the need for the programmer to thread the
linear references through the program or directly handle existential
quantification. However, the description I found to be rather confusing and
the syntactic sugar specialised. What is mentioned is the need to ensure
the syntactic sugar correctly infers types. It appears to be straightforward
but is an additional overhead over the system.

-----
SPL
Various approaches in type systems to allow the coexistence of linear and
non-linear types.
Some ideas from capability calculi to allow abstract interfaces managing
references
CPL
Some approaches do not adequately reflect the common case (let !)
Others hamper inclusion of desirable features e.g. polymorphism (type
qualifiers)
WTD
Extend System F by categorising types as being of two different ``kinds''
(linear or non-linear)
Present operational semantics, and proofs of soundness, progress +
preservation, and respects parametricity. Includes a subsumption rule for
kinds allowing non-linear kinds to be treated as linear.
ROF
RFW

