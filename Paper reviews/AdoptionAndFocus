Some comments about the paper: "Adoption and Focus" by Manuel Fahndrich
and Robert DeLine.

We can think of the guarded type, p |> h, as p guarding the manipulation
of the linear components of h. The guarded type is produced from an
adopt statement. Suppose an adopt statement with an adoptee of type
t* (* denotes linearity), and adopter of type tr(p) (tr(p) says that
we have a tracked type with static name p). Then the produced guarded
type is p |> t (using notation similar to that used within the paper)
and the adopter can be "focused" to obtain access to the linear components.
It is called guarded because when the adopter is free'd the deallocation
invalids all guarded types forall t, p |> t. These p's are static names which
are generated by allocation procedures e.g. new.

Non-linear accesses within a focus body (body of the let in which the focus
was the binding expression) are enforced by the indexing typing judgment.
Another interesting restriction of the focus rule is the prevention of
referring to the guard within the focus body by virtue of its removal from
the capability list.
